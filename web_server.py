import logging
from fastapi import FastAPI, HTTPException, Request
from fastapi.staticfiles import StaticFiles
from fastapi.responses import JSONResponse, HTMLResponse
from pydantic import BaseModel
from typing import Optional
import uvicorn
import sqlite3

from config import CLOUDPAYMENTS_PUBLIC_ID, logger
from db import get_user_by_id, DATABASE_PATH
from messages import SUBSCRIPTION_VARIANTS, START_PRICE, MASSIVE_SUCCESS

web_logger = logging.getLogger(__name__)

app = FastAPI()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory="public"), name="static")

class SuccessPayment(BaseModel):
    userId: str

class WebhookData(BaseModel):
    SubscriptionId: Optional[str] = None
    AccountId: Optional[str] = None

@app.get("/api/ping")
async def ping():
    return {"message": "pong"}

@app.get("/api/user")
async def get_user(id: str):
    if not id:
        raise HTTPException(status_code=400, detail="Missing id")
    
    user = get_user_by_id(id)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    sub_type = user.get('sub_type', 1)
    subscription = next((s for s in SUBSCRIPTION_VARIANTS if s['id'] == sub_type), SUBSCRIPTION_VARIANTS[0])
    
    return {
        **user,
        "title": subscription['title'],
        "price": subscription['price'],
        "start_price": START_PRICE,
    }

@app.post("/api/success")
async def payment_success(data: SuccessPayment):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã"""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ chat_id
    conn = sqlite3.connect(DATABASE_PATH)
    cursor = conn.cursor()
    
    cursor.execute("SELECT chat_id, fio, phone FROM users WHERE id = ?", (data.userId,))
    row = cursor.fetchone()
    conn.close()
    
    if not row:
        raise HTTPException(status_code=404, detail="User not found")
    
    chat_id, fio, phone = row
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
        from bot import bot
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
        await bot.send_message(chat_id, MASSIVE_SUCCESS)
        web_logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
        return {"success": True}
    except Exception as e:
        web_logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        raise HTTPException(status_code=500, detail="Failed to send message")

@app.post("/api/cloudpayments/webhook")
async def cloudpayments_webhook(request: Request):
    """Webhook –¥–ª—è CloudPayments"""
    event = await request.json()
    web_logger.info(f'üîî WEBHOOK –ø–æ–ª—É—á–µ–Ω: {event}')
    
    # CloudPayments —Ç—Ä–µ–±—É–µ—Ç –æ—Ç–≤–µ—Ç 200 —Å JSON {code: 0}
    return {"code": 0}

@app.get("/payment")
async def payment_page(token: str):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–ø–ª–∞—Ç—ã"""
    if not token:
        raise HTTPException(status_code=400, detail="Missing token")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user = get_user_by_id(token)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    # –ß–∏—Ç–∞–µ–º HTML —Ñ–∞–π–ª –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á CloudPayments
    try:
        with open("public/payment/index.html", "r", encoding="utf-8") as f:
            html_content = f.read()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç —Å –ø—É–±–ª–∏—á–Ω—ã–º –∫–ª—é—á–æ–º
        script_tag = f'<script>window.CLOUDPAYMENTS_PUBLIC_ID = "{CLOUDPAYMENTS_PUBLIC_ID}";</script>'
        html_content = html_content.replace("</head>", f"{script_tag}</head>")
        
        return HTMLResponse(content=html_content)
    except FileNotFoundError:
        raise HTTPException(status_code=404, detail="Payment page not found")

def run_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    web_logger.info("üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Ä—Ç—É 8000")
    uvicorn.run(app, host="0.0.0.0", port=8000)

if __name__ == "__main__":
    run_server() 
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

from db import get_user_token_by_user_id
from messages import GREET_MESSAGE, get_subscriptions_from_api
from keyboards import main_menu
from api.requests import FitnessAuthRequest

router = Router()


async def get_subscription_keyboard(user_token: str = None):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ API"""
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–æ–∫
    subscriptions = await get_subscriptions_from_api(user_token)
    
    keyboard = []
    for variant in subscriptions:
        keyboard.append([KeyboardButton(text=variant['title'])])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.append([KeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        one_time_keyboard=True
    ), subscriptions


def get_buy_keyboard(subscription_id: str):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"buy_subscription:{subscription_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º", callback_data="back_to_subscriptions")]
        ]
    )


@router.message(F.text == "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    
    greeting_text = f"""
üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{message.from_user.first_name}</b>!
–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:
"""
    
    await message.answer(greeting_text, reply_markup=main_menu())


@router.callback_query(F.data == "back_to_main")
async def back_to_main_callback_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback –∫–Ω–æ–ø–∫—É"""
    await callback.answer()
    await state.clear()
    
    greeting_text = f"""
üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{callback.from_user.first_name}</b>!
–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:
"""
    
    await callback.message.answer(greeting_text, reply_markup=main_menu())
    await callback.message.delete()


@router.message(F.text == "–ü–æ–¥–ø–∏—Å–∫–∏")
async def subscriptions_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º user_token –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = get_user_token_by_user_id(message.from_user.id)
    user_token = user_data.get('user_token') if user_data else None
    
    keyboard, subscriptions = await get_subscription_keyboard(user_token)
    await message.answer(GREET_MESSAGE, reply_markup=keyboard)


@router.callback_query(F.data == "back_to_subscriptions")
async def back_to_subscriptions_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø–æ–¥–ø–∏—Å–æ–∫"""
    await callback.answer()
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º user_token –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = get_user_token_by_user_id(callback.from_user.id)
    user_token = user_data.get('user_token') if user_data else None
    
    keyboard, subscriptions = await get_subscription_keyboard(user_token)
    await callback.message.answer(GREET_MESSAGE, reply_markup=keyboard)
    await callback.message.delete()


@router.message(F.text.regexp(r".*"))
async def subscription_variant_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–æ–∫
    user_data = get_user_token_by_user_id(message.from_user.id)
    user_token = user_data.get('user_token') if user_data else None
    subscriptions = await get_subscriptions_from_api(user_token)
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    selected_variant = None
    for variant in subscriptions:
        if variant['title'] == message.text.strip():
            selected_variant = variant
            break
    
    if not selected_variant:
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    try:
        fitness_request = FitnessAuthRequest(user_token=user_token)
        details = await fitness_request.get_subscription_details(user_token or "", selected_variant['sub_id'])
        
        if details and details.get("subscription"):
            sub_details = details["subscription"]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            description = f"""
üí≥ <b>{sub_details.get('title', selected_variant['title'])}</b>

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {sub_details.get('price', selected_variant['price'])} ‚ÇΩ/–º–µ—Å

üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{sub_details.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}

‚è∞ <b>–í—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–∞:</b>
{sub_details.get('available_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üìÖ <b>–ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è:</b>
{sub_details.get('validity_period', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

‚ö†Ô∏è <b>–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:</b>
{sub_details.get('restriction', '–ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π')}
"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–º –≤–∑–Ω–æ—Å–µ
            if sub_details.get('fee'):
                fee = sub_details['fee']
                description += f"\nüí∏ <b>–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å:</b> {fee.get('price', '3000')} ‚ÇΩ"
            
            await message.answer(
                description, 
                reply_markup=get_buy_keyboard(selected_variant['sub_id'])
            )
        else:
            # –ï—Å–ª–∏ –¥–µ—Ç–∞–ª–∏ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            basic_info = f"""
üí≥ <b>{selected_variant['title']}</b>

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {selected_variant['price']} ‚ÇΩ/–º–µ—Å

üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{selected_variant['description']}

üí∏ <b>–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å:</b> 3000 ‚ÇΩ
"""
            await message.answer(
                basic_info, 
                reply_markup=get_buy_keyboard(selected_variant['sub_id'])
            )
            
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
        basic_info = f"""
üí≥ <b>{selected_variant['title']}</b>

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {selected_variant['price']} ‚ÇΩ/–º–µ—Å

üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{selected_variant['description']}

üí∏ <b>–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å:</b> 3000 ‚ÇΩ
"""
        await message.answer(
            basic_info, 
            reply_markup=get_buy_keyboard(selected_variant['sub_id'])
        )


@router.callback_query(F.data.regexp(r"^buy_subscription:(.+)$"))
async def buy_subscription_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.answer()
    
    subscription_id = callback.data.split(":")[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = get_user_token_by_user_id(callback.from_user.id)
    
    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
    user_token = user_data.get('user_token') if user_data else None
    subscriptions = await get_subscriptions_from_api(user_token)
    selected_subscription = next((s for s in subscriptions if s['sub_id'] == subscription_id), None)
    
    if selected_subscription:
        pay_message = f"""
üí≥ <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>

–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{selected_subscription['title']}</b>

üí∞ <b>–ö –æ–ø–ª–∞—Ç–µ:</b>
‚Ä¢ –í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å: 3000 ‚ÇΩ (—Ä–∞–∑–æ–≤–æ)
‚Ä¢ –ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ –º–µ—Å—è—Ü: {selected_subscription['price']} ‚ÇΩ
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
–ò–¢–û–ì–û: {3000 + selected_subscription['price']} ‚ÇΩ

‚¨áÔ∏è –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å:
"""
    else:
        pay_message = """
üí≥ <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>

üí∞ <b>–ö –æ–ø–ª–∞—Ç–µ:</b>
‚Ä¢ –í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å: 3000 ‚ÇΩ (—Ä–∞–∑–æ–≤–æ)
‚Ä¢ –ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ –º–µ—Å—è—Ü: —É—Ç–æ—á–Ω—è–µ—Ç—Å—è
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
–ò–¢–û–ì–û: —É—Ç–æ—á–Ω—è–µ—Ç—Å—è

‚¨áÔ∏è –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å:
"""
    
    await callback.message.answer(pay_message, reply_markup=get_buy_keyboard(user_id))



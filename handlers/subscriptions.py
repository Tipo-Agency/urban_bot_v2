# from aiogram import Router, F
# from aiogram.types import Message, CallbackQuery
# from aiogram.fsm.context import FSMContext
# from aiogram.fsm.state import State, StatesGroup
# from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
# import uuid
# import re

# from db import create_or_update_user, get_user_by_chat_id
# from messages import GREET_MESSAGE, SELECT_ANOTHER, SUBSCRIPTION_VARIANTS, get_pay_message
# from config import BASE_URL
# from keyboards import main_menu

# router = Router()

# class SubscriptionStates(StatesGroup):
#     awaiting_fio = State()
#     awaiting_phone = State()
#     processing_payment = State()

# def get_subscription_keyboard():
#     """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–æ–¥–ø–∏—Å–æ–∫"""
#     keyboard = []
#     for variant in SUBSCRIPTION_VARIANTS:
#         keyboard.append([KeyboardButton(text=variant['description'])])
    
#     # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
#     keyboard.append([KeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    
#     return ReplyKeyboardMarkup(
#         keyboard=keyboard,
#         resize_keyboard=True,
#         one_time_keyboard=True
#     )

# def get_payment_keyboard(user_id: str):
#     """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
#     url = f"{BASE_URL}/payment?token={user_id}"
    
#     return InlineKeyboardMarkup(
#         inline_keyboard=[
#             [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=url)],
#             [InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ", callback_data="select_another")],
#             [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
#         ]
#     )

# def get_profile_keyboard():
#     """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
#     return InlineKeyboardMarkup(
#         inline_keyboard=[
#             [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="cancel_subscription")],
#             [InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ", callback_data="change_subscription")],
#             [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
#         ]
#     )

# @router.message(F.text == "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
# async def back_to_main_menu_handler(message: Message, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–Ω–æ–ø–∫—É"""
#     await state.clear()
    
#     greeting_text = f"""
# üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

# –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{message.from_user.first_name}</b>!
# –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:
# """
    
#     await message.answer(greeting_text, reply_markup=main_menu())

# @router.callback_query(F.data == "back_to_main")
# async def back_to_main_callback_handler(callback: CallbackQuery, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback –∫–Ω–æ–ø–∫—É"""
#     await callback.answer()
#     await state.clear()
    
#     greeting_text = f"""
# üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

# –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{callback.from_user.first_name}</b>!
# –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:
# """
    
#     await callback.message.answer(greeting_text, reply_markup=main_menu())
#     await callback.message.delete()

# @router.message(F.text == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
# async def profile_handler(message: Message):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
#     user_data = get_user_by_chat_id(message.chat.id)
    
#     if not user_data or not user_data.get('fio'):
#         await message.answer("""
# ‚ùå –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.

# –î–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª "–ü–æ–¥–ø–∏—Å–∫–∏".
# """, reply_markup=InlineKeyboardMarkup(
#             inline_keyboard=[
#                 [InlineKeyboardButton(text="üí≥ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="go_to_subscriptions")],
#                 [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
#             ]
#         ))
#         return
    
#     # –ù–∞—Ö–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–∏—Ñ–µ
#     sub_type = user_data.get('sub_type', 1)
#     subscription = next((s for s in SUBSCRIPTION_VARIANTS if s['id'] == sub_type), SUBSCRIPTION_VARIANTS[0])
    
#     # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –±–µ–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (—Ü–µ–Ω—ã)
#     description_lines = subscription['description'].split('\n')
#     tariff_description = description_lines[1] if len(description_lines) > 1 else ''
    
#     profile_text = f"""
# üë§ <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>

# üìã <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>
# ‚Ä¢ –§–ò–û: {user_data['fio']}
# ‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {user_data['phone']}

# üí≥ <b>–¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ:</b>
# ‚Ä¢ {subscription['title']} ‚Äî {subscription['price']} ‚ÇΩ/–º–µ—Å
# ‚Ä¢ {tariff_description}

# ‚ÑπÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π:
# """
    
#     await message.answer(profile_text, reply_markup=get_profile_keyboard())

# @router.callback_query(F.data == "go_to_subscriptions")
# async def go_to_subscriptions_handler(callback: CallbackQuery, state: FSMContext):
#     """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞"""
#     await callback.answer()
#     await state.clear()
    
#     await callback.message.answer(GREET_MESSAGE, reply_markup=get_subscription_keyboard())
#     await callback.message.delete()

# @router.message(F.text == "–ü–æ–¥–ø–∏—Å–∫–∏")
# async def subscriptions_handler(message: Message, state: FSMContext):
#     await state.clear()
#     await message.answer(GREET_MESSAGE, reply_markup=get_subscription_keyboard())

# @router.message(F.text.in_([variant['description'] for variant in SUBSCRIPTION_VARIANTS]))
# async def subscription_variant_handler(message: Message, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
#     # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ
#     selected_variant = None
#     for variant in SUBSCRIPTION_VARIANTS:
#         if variant['description'] == message.text.strip():
#             selected_variant = variant
#             break
    
#     if not selected_variant:
#         return
    
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
#     await state.update_data(sub_type=selected_variant['id'])
    
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
#     user_data = get_user_by_chat_id(message.chat.id)
    
#     if user_data and user_data.get('fio') and user_data.get('phone'):
#         # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å, —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
#         user_id = user_data['id']
        
#         # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏
#         create_or_update_user(
#             user_id=user_id,
#             chat_id=message.chat.id,
#             fio=user_data['fio'],
#             phone=user_data['phone'],
#             sub_type=selected_variant['id']
#         )
        
#         pay_message = get_pay_message(selected_variant['title'], selected_variant['price'])
        
#         await message.answer(
#             f"–¢–∞—Ä–∏—Ñ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {selected_variant['title']}", 
#             reply_markup=ReplyKeyboardRemove()
#         )
#         await message.answer(pay_message, reply_markup=get_payment_keyboard(user_id))
#     else:
#         # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –§–ò–û
#         await state.set_state(SubscriptionStates.awaiting_fio)
#         cancel_keyboard = InlineKeyboardMarkup(
#             inline_keyboard=[
#                 [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]
#             ]
#         )
#         await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:", reply_markup=cancel_keyboard)

# @router.message(SubscriptionStates.awaiting_fio)
# async def process_fio(message: Message, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –§–ò–û"""
#     fio = message.text.strip()
#     await state.update_data(fio=fio)
#     await state.set_state(SubscriptionStates.awaiting_phone)
    
#     cancel_keyboard = InlineKeyboardMarkup(
#         inline_keyboard=[
#             [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]
#         ]
#     )
#     await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX):", reply_markup=cancel_keyboard)

# @router.message(SubscriptionStates.awaiting_phone)
# async def process_phone(message: Message, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
#     phone = message.text.strip()
    
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞
#     phone_regex = r'^\+7\d{10}$'
#     if not re.match(phone_regex, phone):
#         cancel_keyboard = InlineKeyboardMarkup(
#             inline_keyboard=[
#                 [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]
#             ]
#         )
#         await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, +71234567890).", 
#                            reply_markup=cancel_keyboard)
#         return
    
#     # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
#     data = await state.get_data()
#     fio = data.get('fio')
#     sub_type = data.get('sub_type', 1)
    
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
#     existing_user = get_user_by_chat_id(message.chat.id)
#     user_id = existing_user['id'] if existing_user else str(uuid.uuid1())
    
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
#     create_or_update_user(
#         user_id=user_id,
#         chat_id=message.chat.id,
#         fio=fio,
#         phone=phone,
#         sub_type=sub_type
#     )
    
#     # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ
#     selected_variant = next((v for v in SUBSCRIPTION_VARIANTS if v['id'] == sub_type), SUBSCRIPTION_VARIANTS[0])
    
#     # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã
#     pay_message = get_pay_message(selected_variant['title'], selected_variant['price'])
    
#     await state.set_state(SubscriptionStates.processing_payment)
#     await message.answer(pay_message, reply_markup=get_payment_keyboard(user_id))

# @router.callback_query(F.data == "select_another")
# async def select_another_handler(callback: CallbackQuery, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∞—Ä–∏—Ñ'"""
#     await callback.answer()
#     await state.clear()
    
#     await callback.message.answer(SELECT_ANOTHER, reply_markup=get_subscription_keyboard())
#     await callback.message.delete()

# @router.callback_query(F.data == "cancel_subscription")
# async def cancel_subscription_handler(callback: CallbackQuery):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
#     await callback.answer()
    
#     cancel_text = """
# ‚ùå <b>–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>

# –î–ª—è –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∫–ª—É–±–∞:
# üìû –¢–µ–ª–µ—Ñ–æ–Ω: +7 (xxx) xxx-xx-xx
# üí¨ Telegram: @manager_username

# –õ–∏–±–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –æ—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂ –ø—Ä–∏ –ø–æ—Å–µ—â–µ–Ω–∏–∏ –∫–ª—É–±–∞.

# ‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –æ—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤—Å—Ç—É–ø–∞–µ—Ç –≤ —Å–∏–ª—É —Å –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.
# """
    
#     back_keyboard = InlineKeyboardMarkup(
#         inline_keyboard=[
#             [InlineKeyboardButton(text="üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
#         ]
#     )
    
#     await callback.message.answer(cancel_text, reply_markup=back_keyboard)

# @router.callback_query(F.data == "change_subscription")
# async def change_subscription_handler(callback: CallbackQuery, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞"""
#     await callback.answer()
#     await state.clear()
    
#     await callback.message.answer(
#         "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ:", 
#         reply_markup=get_subscription_keyboard()
#     )
#     await callback.message.delete()



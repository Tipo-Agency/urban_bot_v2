import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove

from db import get_user_token_by_user_id
from messages import GREET_MESSAGE, get_subscriptions_from_api, group_subscriptions_by_type, format_subscription_with_savings
from keyboards import main_menu, get_payment_link_keyboard, get_subscription_types_keyboard, get_subscription_periods_keyboard, get_subscription_buy_keyboard
from api.requests import FitnessAuthRequest, FitnessSubscriptionRequest

logger = logging.getLogger(__name__)

router = Router()

logger.info("üîß subscriptions_router —Å–æ–∑–¥–∞–Ω –∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_subscriptions_data = {}
user_selected_type = {}

async def get_grouped_subscriptions(user_token: str = ""):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ API"""
    subscriptions = await get_subscriptions_from_api(user_token)
    return group_subscriptions_by_type(subscriptions)


def get_buy_keyboard(subscription_id: str):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"buy_subscription:{subscription_id}")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–∞–º", callback_data="back_to_subscriptions")]
        ]
    )


# –ë–æ–ª–µ–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –Ω–∞—á–∞–ª–µ
@router.message(F.text == "–ü–æ–¥–ø–∏—Å–∫–∏")
async def subscriptions_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ –ø–æ–¥–ø–∏—Å–æ–∫"""
    logger.info(f"üîç subscriptions_handler –≤—ã–∑–≤–∞–Ω! user_id={message.from_user.id}, text='{message.text}'")
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º user_token –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = get_user_token_by_user_id(message.from_user.id)
    user_token = user_data.get('user_token') if user_data else None
    
    # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    grouped_subscriptions = await get_grouped_subscriptions(user_token)
    user_subscriptions_data[message.from_user.id] = grouped_subscriptions
    
    keyboard = get_subscription_types_keyboard()
    await message.answer(GREET_MESSAGE, reply_markup=keyboard)


@router.message(F.text == "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main_menu_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    
    greeting_text = f"""
üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{message.from_user.first_name}</b>!
–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:
"""
    
    await message.answer(greeting_text, reply_markup=main_menu())


@router.callback_query(F.data == "back_to_main")
async def back_to_main_callback_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–µ—Ä–µ–∑ callback –∫–Ω–æ–ø–∫—É"""
    await callback.answer()
    await state.clear()
    
    greeting_text = f"""
üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{callback.from_user.first_name}</b>!
–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:
"""
    
    await callback.message.answer(greeting_text, reply_markup=main_menu())
    await callback.message.delete()


@router.callback_query(F.data == "back_to_subscriptions")
async def back_to_subscriptions_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –ø–æ–¥–ø–∏—Å–æ–∫"""
    await callback.answer()
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º user_token –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = get_user_token_by_user_id(callback.from_user.id)
    user_token = user_data.get('user_token') if user_data else None
    
    # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
    grouped_subscriptions = await get_grouped_subscriptions(user_token)
    user_subscriptions_data[callback.from_user.id] = grouped_subscriptions
    
    keyboard = get_subscription_types_keyboard()
    await callback.message.answer(GREET_MESSAGE, reply_markup=keyboard)
    await callback.message.delete()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
@router.message(F.text.in_(["–î—Ä—É–≥–æ–µ", "–î–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞", "–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å", "–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ"]))
async def subscription_type_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    logger.info(f"üîç subscription_type_handler –≤—ã–∑–≤–∞–Ω! user_id={message.from_user.id}, text='{message.text}'")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø
    type_mapping = {
        "–î–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞": "–î–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞",
        "–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å": "–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å", 
        "–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ": "–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ",
        "–î—Ä—É–≥–æ–µ": "–î—Ä—É–≥–æ–µ"
    }
    
    selected_type = type_mapping.get(message.text)
    if not selected_type:
        return
        
    user_selected_type[message.from_user.id] = selected_type
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    grouped_subscriptions = user_subscriptions_data.get(message.from_user.id, {})
    subscriptions_for_type = grouped_subscriptions.get(selected_type, [])
    
    if not subscriptions_for_type:
        await message.answer(f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥–ø–∏—Å–∫–∏ —Ç–∏–ø–∞ '{selected_type}' —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.", reply_markup=get_subscription_types_keyboard())
        return
    
    # –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–î—Ä—É–≥–æ–µ" –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    if selected_type == "–î—Ä—É–≥–æ–µ":
        await show_other_subscriptions_list(message, subscriptions_for_type)
        return
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ —Å —Ä–∞—Å—á–µ—Ç–æ–º —ç–∫–æ–Ω–æ–º–∏–∏
    monthly_subscription = next((s for s in subscriptions_for_type if s.get('period', 1) == 1), None)
    formatted_subscriptions = []
    
    for subscription in subscriptions_for_type:
        formatted_sub = format_subscription_with_savings(subscription, monthly_subscription)
        formatted_subscriptions.append(formatted_sub)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä–∏–æ–¥–∞–º–∏
    keyboard = get_subscription_periods_keyboard(selected_type, formatted_subscriptions)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    type_descriptions = {
        "–î–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞": "üíº <b>–î–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞</b>\n\n–ü–æ—Å–µ—â–µ–Ω–∏–µ —Å 7:00 –¥–æ 17:00, —Ç—Ä–µ–Ω–∞–∂—ë—Ä–Ω—ã–π –∑–∞–ª –∏ –∫–∞—Ä–¥–∏–æ-–∑–æ–Ω–∞.",
        "–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å": "üåü <b>–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å</b>\n\n–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, —Ç—Ä–µ–Ω–∞–∂—ë—Ä–Ω—ã–π –∑–∞–ª –∏ –∫–∞—Ä–¥–∏–æ-–∑–æ–Ω–∞.",
        "–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ": "üèÜ <b>–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ</b>\n\n–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ, –≤—Å–µ –≥—Ä—É–ø–ø–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, —Å–ø–∞-–∑–æ–Ω–∞ –∏ —Å–∫–∞–ª–æ–¥—Ä–æ–º."
    }
    
    description = type_descriptions.get(selected_type, f"<b>{selected_type}</b>")
    description += "\n\nüí∞ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏:"
    
    await message.answer(description, reply_markup=keyboard)


async def show_other_subscriptions_list(message: Message, subscriptions: list):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–î—Ä—É–≥–æ–µ'"""
    if not subscriptions:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.", reply_markup=get_subscription_types_keyboard())
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫
    subscriptions_text = "üîç <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
    
    for i, subscription in enumerate(subscriptions, 1):
        title = subscription.get('title', '–ü–æ–¥–ø–∏—Å–∫–∞')
        price = subscription.get('price', 0)
        description = subscription.get('description', '')
        validity = subscription.get('validity', {})
        available_time = subscription.get('available_time', '')
        
        subscriptions_text += f"<b>{i}. {title}</b>\n"
        subscriptions_text += f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price} ‚ÇΩ\n"
        
        if validity.get('validity_description'):
            subscriptions_text += f"‚è∞ –°—Ä–æ–∫: {validity['validity_description']}\n"
        
        if description:
            subscriptions_text += f"üìã {description}\n"
        
        if available_time:
            subscriptions_text += f"‚è∞ {available_time}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–º –≤–∑–Ω–æ—Å–µ
        fee = subscription.get('fee', {})
        if fee and fee.get('price'):
            subscriptions_text += f"üí∏ –í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å: {fee.get('price')} ‚ÇΩ\n"
        
        subscriptions_text += "\n"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîç –í—ã–±—Ä–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="select_other_subscription")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–∏–ø–∞–º –ø–æ–¥–ø–∏—Å–æ–∫", callback_data="back_to_subscriptions")]
        ]
    )
    
    await message.answer(subscriptions_text.strip(), reply_markup=keyboard)


@router.callback_query(F.data == "select_other_subscription")
async def select_other_subscription_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–î—Ä—É–≥–æ–µ'"""
    await callback.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–î—Ä—É–≥–æ–µ"
    grouped_subscriptions = user_subscriptions_data.get(callback.from_user.id, {})
    other_subscriptions = grouped_subscriptions.get("–î—Ä—É–≥–æ–µ", [])
    
    if not other_subscriptions:
        await callback.message.edit_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥–ø–∏—Å–∫–∏ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.", reply_markup=get_subscription_types_keyboard())
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    keyboard_buttons = []
    for i, subscription in enumerate(other_subscriptions, 1):
        title = subscription.get('title', '–ü–æ–¥–ø–∏—Å–∫–∞')
        price = subscription.get('price', 0)
        button_text = f"{i}. {title} - {price} ‚ÇΩ"
        keyboard_buttons.append([InlineKeyboardButton(text=button_text, callback_data=f"select_other:{subscription['sub_id']}")])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–∏–ø–∞–º –ø–æ–¥–ø–∏—Å–æ–∫", callback_data="back_to_subscriptions")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
    
    await callback.message.edit_text("üîç –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É:", reply_markup=keyboard)


@router.callback_query(F.data.regexp(r"^select_other:(.+)$"))
async def select_specific_other_subscription_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '–î—Ä—É–≥–æ–µ'"""
    await callback.answer()
    
    subscription_id = callback.data.split(":")[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–î—Ä—É–≥–æ–µ"
    grouped_subscriptions = user_subscriptions_data.get(callback.from_user.id, {})
    other_subscriptions = grouped_subscriptions.get("–î—Ä—É–≥–æ–µ", [])
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
    selected_subscription = next((s for s in other_subscriptions if s['sub_id'] == subscription_id), None)
    
    if not selected_subscription:
        await callback.message.edit_text("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_subscription_types_keyboard())
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    title = selected_subscription.get('title', '–ü–æ–¥–ø–∏—Å–∫–∞')
    price = selected_subscription.get('price', 0)
    description = selected_subscription.get('description', '')
    validity = selected_subscription.get('validity', {})
    available_time = selected_subscription.get('available_time', '')
    services = selected_subscription.get('services', [])
    
    details = f"""
üîç <b>{title}</b>

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {price} ‚ÇΩ
‚è∞ <b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> {validity.get('validity_description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{description if description else '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}

‚è∞ <b>–í—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–∞:</b>
{available_time if available_time else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–∞—Ö
    if services:
        details += "\nüéÅ <b>–í–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:</b>\n"
        for service in services:
            details += f"‚Ä¢ {service.get('title', '')} - {service.get('count', 1)} —à—Ç.\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–º –≤–∑–Ω–æ—Å–µ
    fee = selected_subscription.get('fee', {})
    if fee and fee.get('price'):
        details += f"\nüí∏ <b>–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å:</b> {fee.get('price')} ‚ÇΩ"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–∫—É–ø–∫–∏
    keyboard = get_subscription_buy_keyboard(selected_subscription['sub_id'])
    
    await callback.message.edit_text(details.strip(), reply_markup=keyboard)


@router.message(F.text == "üîô –ù–∞–∑–∞–¥ –∫ —Ç–∏–ø–∞–º –ø–æ–¥–ø–∏—Å–æ–∫")
async def back_to_types_handler(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–æ–≤ –ø–æ–¥–ø–∏—Å–æ–∫"""
    keyboard = get_subscription_types_keyboard()
    await message.answer(GREET_MESSAGE, reply_markup=keyboard)


@router.message(lambda message: message.text and ("–º–µ—Å. ‚Äî" in message.text))
async def subscription_period_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    logger.info(f"üîç subscription_period_handler –≤—ã–∑–≤–∞–Ω! user_id={message.from_user.id}, text='{message.text}'")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥ –∏ —Ü–µ–Ω—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    try:
        # –§–æ—Ä–º–∞—Ç: "1 –º–µ—Å. ‚Äî 2400 ‚ÇΩ" –∏–ª–∏ "6 –º–µ—Å. ‚Äî 13900 ‚ÇΩ üí∞"
        parts = message.text.split(" –º–µ—Å. ‚Äî ")
        if len(parts) != 2:
            return
            
        period = int(parts[0])
        price_part = parts[1].split(" ")[0]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏
        price = int(price_part)
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
        selected_type = user_selected_type.get(message.from_user.id)
        if not selected_type:
            return
            
        grouped_subscriptions = user_subscriptions_data.get(message.from_user.id, {})
        subscriptions_for_type = grouped_subscriptions.get(selected_type, [])
        
        selected_subscription = None
        for subscription in subscriptions_for_type:
            if subscription.get('period') == period and subscription.get('price') == price:
                selected_subscription = subscription
                break
                
        if not selected_subscription:
            return
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        monthly_subscription = next((s for s in subscriptions_for_type if s.get('period', 1) == 1), None)
        formatted_sub = format_subscription_with_savings(selected_subscription, monthly_subscription)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —ç–∫–æ–Ω–æ–º–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
        savings_info = ""
        if period > 1 and monthly_subscription:
            monthly_price = monthly_subscription.get('price', 0)
            if monthly_price > 0:
                total_monthly_cost = monthly_price * period
                savings = total_monthly_cost - price
                if savings > 0:
                    savings_percent = round((savings / total_monthly_cost) * 100)
                    savings_info = f"\n\nüí∞ <b>–í–∞—à–∞ —ç–∫–æ–Ω–æ–º–∏—è:</b> {savings} ‚ÇΩ ({savings_percent}%)"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
        user_data = get_user_token_by_user_id(message.from_user.id)
        user_token = user_data.get('user_token') if user_data else None
        
        description = f"""
üí≥ <b>{formatted_sub['title']}</b>

üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {price} ‚ÇΩ
üìÖ <b>–ü–µ—Ä–∏–æ–¥:</b> {period} –º–µ—Å.

üìã <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>
{selected_subscription.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')}

‚è∞ <b>–í—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–∞:</b>
{selected_subscription.get('available_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
{savings_info}
        """
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–º –≤–∑–Ω–æ—Å–µ
        fee = selected_subscription.get('fee', {})
        if fee and fee.get('price'):
            description += f"\n\nüí∏ <b>–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å:</b> {fee.get('price')} ‚ÇΩ"
        
        await message.answer(
            description.strip(),
            reply_markup=get_subscription_buy_keyboard(selected_subscription['sub_id'])
        )
        
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        return


@router.callback_query(F.data == "back_to_periods")
async def back_to_periods_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.answer()
    
    selected_type = user_selected_type.get(callback.from_user.id)
    if not selected_type:
        # –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ –≤—ã–±—Ä–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç–∏–ø–∞–º
        keyboard = get_subscription_types_keyboard()
        await callback.message.edit_text(GREET_MESSAGE, reply_markup=None)
        await callback.message.answer(GREET_MESSAGE, reply_markup=keyboard)
        return
    
    # –î–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "–î—Ä—É–≥–æ–µ" –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ç–∏–ø–∞–º
    if selected_type == "–î—Ä—É–≥–æ–µ":
        keyboard = get_subscription_types_keyboard()
        await callback.message.edit_text(GREET_MESSAGE, reply_markup=None)
        await callback.message.answer(GREET_MESSAGE, reply_markup=keyboard)
        return
        
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞
    grouped_subscriptions = user_subscriptions_data.get(callback.from_user.id, {})
    subscriptions_for_type = grouped_subscriptions.get(selected_type, [])
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ —Å —Ä–∞—Å—á–µ—Ç–æ–º —ç–∫–æ–Ω–æ–º–∏–∏
    monthly_subscription = next((s for s in subscriptions_for_type if s.get('period', 1) == 1), None)
    formatted_subscriptions = []
    
    for subscription in subscriptions_for_type:
        formatted_sub = format_subscription_with_savings(subscription, monthly_subscription)
        formatted_subscriptions.append(formatted_sub)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–µ—Ä–∏–æ–¥–∞–º–∏
    keyboard = get_subscription_periods_keyboard(selected_type, formatted_subscriptions)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    type_descriptions = {
        "–î–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞": "üíº <b>–î–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞</b>\n\n–ü–æ—Å–µ—â–µ–Ω–∏–µ —Å 7:00 –¥–æ 17:00, —Ç—Ä–µ–Ω–∞–∂—ë—Ä–Ω—ã–π –∑–∞–ª –∏ –∫–∞—Ä–¥–∏–æ-–∑–æ–Ω–∞.",
        "–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å": "üåü <b>–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å</b>\n\n–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, —Ç—Ä–µ–Ω–∞–∂—ë—Ä–Ω—ã–π –∑–∞–ª –∏ –∫–∞—Ä–¥–∏–æ-–∑–æ–Ω–∞.",
        "–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ": "üèÜ <b>–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ</b>\n\n–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ, –≤—Å–µ –≥—Ä—É–ø–ø–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, —Å–ø–∞-–∑–æ–Ω–∞ –∏ —Å–∫–∞–ª–æ–¥—Ä–æ–º."
    }
    
    description = type_descriptions.get(selected_type, f"<b>{selected_type}</b>")
    description += "\n\nüí∞ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏:"
    
    await callback.message.edit_text(description, reply_markup=None)
    await callback.message.answer(description, reply_markup=keyboard)


@router.message(lambda message: message.text not in ["–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "–ü–æ–¥–ø–∏—Å–∫–∏", "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", "üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", "–î—Ä—É–≥–æ–µ", "–î–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞", "–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å", "–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ", "üîô –ù–∞–∑–∞–¥ –∫ —Ç–∏–ø–∞–º –ø–æ–¥–ø–∏—Å–æ–∫"] and not (message.text and "–º–µ—Å. ‚Äî" in message.text))
async def subscription_variant_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (fallback)"""
    logger.info(f"üîç subscription_variant_handler (fallback) –≤—ã–∑–≤–∞–Ω! user_id={message.from_user.id}, text='{message.text}'")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –Ω–æ–≤–æ–º—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
    keyboard = get_subscription_types_keyboard()
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–¥–ø–∏—Å–æ–∫:", reply_markup=keyboard)


@router.callback_query(F.data.regexp(r"^buy_subscription:(.+)$"))
async def buy_subscription_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.answer()
    
    subscription_id = callback.data.split(":")[1]
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = get_user_token_by_user_id(callback.from_user.id)
    
    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
    user_token = user_data.get('user_token') if user_data else None
    subscriptions = await get_subscriptions_from_api(user_token)
    selected_subscription = next((s for s in subscriptions if s['sub_id'] == subscription_id), None)

    if selected_subscription:
        sub_id = selected_subscription['sub_id']
        sub_name = selected_subscription['title']
        sub_price = selected_subscription['price']
        sub_fee_id = selected_subscription.get('fee', {}).get('id', '')
        sub_fee_title = selected_subscription.get('fee', {}).get('title', '')
        sub_fee_price = selected_subscription.get('fee', {}).get('price', 0)
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ int
        try:
            fee_price_int = int(sub_fee_price) if sub_fee_price and str(sub_fee_price).strip() else 0
            sub_price_int = int(sub_price) if sub_price else 0
            total_price = fee_price_int + sub_price_int
        except (ValueError, TypeError):
            fee_price_int = 0
            sub_price_int = int(sub_price) if sub_price else 0
            total_price = sub_price_int

        pay_message = f"""
üí≥ <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>

–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{sub_name}</b>

üí∞ –ö –æ–ø–ª–∞—Ç–µ:"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º fee —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        if fee_price_int > 0:
            pay_message += f"\n‚Ä¢ {sub_fee_title}: {fee_price_int} ‚ÇΩ (—Ä–∞–∑–æ–≤–æ)"
        
        pay_message += f"""
‚Ä¢ –ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ –º–µ—Å—è—Ü: {sub_price_int} ‚ÇΩ
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
–ò–¢–û–ì–û: {total_price} ‚ÇΩ

‚¨áÔ∏è –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å:
"""

        if not user_token:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu())
        else:
            fitness_request = FitnessSubscriptionRequest(user_token=user_token)
            
            # –ü–µ—Ä–µ–¥–∞–µ–º fee_id —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if sub_fee_id and sub_fee_id.strip():
                url = await fitness_request.get_payment_link(
                    subscription_id=sub_id,
                    fee_id=sub_fee_id,
                )
            else:
                url = await fitness_request.get_payment_link(
                    subscription_id=sub_id,
                )
            if not url:
                await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu())
            else:
                await callback.message.edit_text(pay_message, reply_markup=get_payment_link_keyboard(url=url, subscription_id=sub_id))


@router.callback_query(F.data.regexp(r"^check_payment:(.+)$"))
async def check_payment_handler(callback: CallbackQuery):
    subscription_id = callback.data.split(":")[1]
    user_token = get_user_token_by_user_id(callback.from_user.id).get('user_token', '')

    if user_token and subscription_id:
        fitness_request = FitnessSubscriptionRequest(user_token=user_token)
        payment_status = await fitness_request.check_payment(subscription_id)

        if payment_status:
            await callback.message.edit_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.", reply_markup=main_menu())
        else:
            await callback.message.edit_text("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –≤—ã–ø–æ–ª–¥–µ–Ω, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", reply_markup=main_menu())


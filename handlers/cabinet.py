from aiogram import Router, F
from aiogram.types import Message
from db import get_user_token_by_user_id
from api.requests import FitnessSubscriptionRequest
from keyboards import get_cabinet_keyboard
from datetime import datetime

router = Router()


@router.message(F.text == "–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
async def cabinet_handler(message: Message):
    user_data = get_user_token_by_user_id(message.from_user.id)
    user_token = user_data.get('user_token') if user_data else None

    if not user_token:
        await message.answer("‚ùå –í—ã –µ—â–µ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    fitness_request = FitnessSubscriptionRequest(user_token=user_token)
    client_info = await fitness_request.get_client()

    if not client_info or not client_info.get("result"):
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    data = client_info.get("data", {})

    fio = f"{data.get('last_name', '')} {data.get('name', '')} {data.get('second_name', '')}".strip()
    email = data.get("email", "‚Äî")
    phone = data.get("phone", "‚Äî")
    birthday = data.get("birthday", "‚Äî")
    sex = data.get("sex")
    sex_str = "–ú—É–∂—Å–∫–æ–π" if sex == 1 else ("–ñ–µ–Ω—Å–∫–∏–π" if sex == 2 else "‚Äî")
    club = data.get("club", {})
    club_name = club.get("name", "‚Äî")
    tags = ", ".join([tag.get("title", "") for tag in data.get("tags", [])]) or "‚Äî"
    promo_code = ", ".join([promo.get("code", "") for promo in data.get("promo_codes", [])]) or "‚Äî"

    #–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ
    subscriptions_data = await fitness_request.get_user_subscriptions()
    first_subscription = subscriptions_data.get("subscriptions", [{}])[0]

    subsctiption_id = first_subscription.get("item_id", "")
    title = first_subscription.get("title")
    status = first_subscription.get("status")
    active_date = first_subscription.get("active_date", "")
    end_date = first_subscription.get("end_date", "")
    price = first_subscription.get("recurrent_details", {}).get("payment_amount", "")

    if active_date and end_date:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ datetime-–æ–±—ä–µ–∫—Ç—ã
        active = datetime.strptime(active_date, "%Y-%m-%d").date()
        end = datetime.strptime(end_date, "%Y-%m-%d").date()

        # –°—á–∏—Ç–∞–µ–º, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å
        days_left = (end - datetime.today().date()).days
    

    msg = (
        "üë§ <b>–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n"
        f"<b>–§–ò–û:</b> {fio}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
        f"<b>Email:</b> {email}\n"
        f"<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {birthday}\n"
        f"<b>–ü–æ–ª:</b> {sex_str}\n"
        f"<b>–ö–ª—É–±:</b> {club_name}\n"
        f"<b>–¢–µ–≥–∏:</b> {tags}\n\n"
    )
    if promo_code:
        msg += f"<b>–ü—Ä–æ–º–æ–∫–æ–¥—ã:</b> {promo_code}\n\n"

    if first_subscription:
        msg += (
            f"üí≥ <b>–¢–µ–∫—É—â–∏–π —Ç–∞—Ä–∏—Ñ:</b> {title}\n"
            f"<b>–ù–∞—á–∞–ª–æ:</b> {active_date}\n"
            f"<b>–û–∫–æ–Ω—á–∞–Ω–∏–µ:</b> {end_date}\n"
            f"<b>–û—Å—Ç–∞–ª–æ—Å—å:</b> {days_left}\n"
            f"<b>–¶–µ–Ω–∞:</b> {price} ‚ÇΩ/–º–µ—Å\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n"
        )

    await message.answer(msg, reply_markup=get_cabinet_keyboard())
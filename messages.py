GREET_MESSAGE = """
üèãÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–±!  

–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –æ–Ω–ª–∞–π–Ω –∏ –Ω–∞—á–Ω–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è —É–∂–µ —Å–µ–≥–æ–¥–Ω—è üí™  
–ü–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏:

üîπ –í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å ‚Äî 3000 ‚ÇΩ (—Ä–∞–∑–æ–≤—ã–π, –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–µ)  
üîπ –î–∞–ª–µ–µ ‚Äî –µ–∂–µ–º–µ—Å—è—á–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞  
üîπ –ü–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç  

üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–ª—É–±–Ω–æ–π –∫–∞—Ä—Ç—ã:
"""

SELECT_ANOTHER = """
üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–ª—É–±–Ω–æ–π –∫–∞—Ä—Ç—ã

üîπ –í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å ‚Äî 3000 ‚ÇΩ (—Ä–∞–∑–æ–≤—ã–π, –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –ø–æ–∫—É–ø–∫–µ)  
üîπ –î–∞–ª–µ–µ ‚Äî –µ–∂–µ–º–µ—Å—è—á–Ω–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞  
üîπ –ü–æ–¥–ø–∏—Å–∫—É –º–æ–∂–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç  
"""

START_PRICE = 3000

def get_pay_message(title: str, price: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã"""
    return f"""
üìù –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ {title} 

üí≥ –ö –æ–ø–ª–∞—Ç–µ:
‚Ä¢ –í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–π –≤–∑–Ω–æ—Å: {START_PRICE} ‚ÇΩ (—Ä–∞–∑–æ–≤–æ)
‚Ä¢ –ê–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ –º–µ—Å—è—Ü: {price} ‚ÇΩ
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
–ò–¢–û–ì–û: {START_PRICE + price} ‚ÇΩ

‚¨áÔ∏è –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å:
"""

import logging

logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ API
async def get_subscriptions_from_api(user_token: str = None):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ API –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    try:
        # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ JSON
        # –ù–æ –ª—É—á—à–µ –≤—Å–µ –∂–µ –ø–æ–ª—É—á–∞—Ç—å –∏—Ö –∏–∑ API
        from api.requests import FitnessSubscriptionRequest
        
        fitness_request = FitnessSubscriptionRequest(user_token)
        result = await fitness_request.get_subscriptions()

        logger.debug(f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç get_subscriptions: {result}")
        if result and result.get("subscriptions"):
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ API –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
            subscriptions = []
            for i, sub in enumerate(result["subscriptions"], 1):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç "XXXX ‚ÇΩ")
                price_str = sub.get("price", "0")
                price = int(''.join(filter(str.isdigit, price_str))) if price_str else 0
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
                available_time = sub.get("available_time", "")
                description = sub.get("description", "")
                if not description:
                    description = f"{sub.get('title', '–¢–∞—Ä–∏—Ñ')} ‚Äî {price} ‚ÇΩ"
                    if available_time:
                        description += f"\n{available_time}"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                subscription_data = {
                    "id": i,
                    "sub_id": sub.get("id", ""),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID –∏–∑ API
                    "title": sub.get("title", "–¢–∞—Ä–∏—Ñ"),
                    "description": description,
                    "price": price,
                    "available_time": available_time,
                    "fee": {
                        "id": sub.get("fee", {}).get("id", ""),
                        "title": sub.get("fee", {}).get("title", ""),
                        "price": sub.get("fee", {}).get("price", ""),
                    },
                    "validity": sub.get("validity", {}),
                    "services": sub.get("services", [])
                }
                
                subscriptions.append(subscription_data)
            
            logger.debug(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(subscriptions)} –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ API")
            return subscriptions
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            logger.warning("‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ JSON")
            return get_test_subscriptions_from_json()
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ API: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return get_test_subscriptions_from_json()


def get_test_subscriptions_from_json():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–æ–∫ –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ JSON"""
    return [
        {
            "id": 1,
            "sub_id": "13d7c685-737d-11f0-bbf7-96ba5d0233b2",
            "title": "–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ 12 –º–µ—Å—è—Ü–µ–≤",
            "description": "–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ, –≤—Å–µ –≥—Ä—É–ø–ø–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, —Å–ø–∞-–∑–æ–Ω–∞ –∏ —Å–∫–∞–ª–æ–¥—Ä–æ–º.",
            "price": 23900,
            "available_time": "–ß–∞—Å—ã –ø–æ—Å–µ—â–µ–Ω–∏–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã: ",
            "fee": {"id": "", "title": "", "price": ""}
        },
        {
            "id": 2,
            "sub_id": "7f2e7462-737c-11f0-bbf7-96ba5d0233b2",
            "title": "–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ 2 400 —Ä. / –º–µ—Å.",
            "description": "–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ, –≤—Å–µ –≥—Ä—É–ø–ø–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, —Å–ø–∞-–∑–æ–Ω–∞ –∏ —Å–∫–∞–ª–æ–¥—Ä–æ–º.",
            "price": 2400,
            "available_time": "",
            "fee": {"id": "1033dc61-2fc7-11f0-bbd0-99fe2db82e7a", "title": "–°—Ç–∞—Ä—Ç–æ–≤—ã–π –≤–∑–Ω–æ—Å", "price": "3000"}
        },
        {
            "id": 3,
            "sub_id": "cf98e44b-737c-11f0-bbf7-96ba5d0233b2",
            "title": "–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ 6 –º–µ—Å—è—Ü–µ–≤",
            "description": "–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ, –≤—Å–µ –≥—Ä—É–ø–ø–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã, —Å–ø–∞-–∑–æ–Ω–∞ –∏ —Å–∫–∞–ª–æ–¥—Ä–æ–º.",
            "price": 13900,
            "available_time": "",
            "fee": {"id": "", "title": "", "price": ""}
        },
        {
            "id": 4,
            "sub_id": "8d7cd24b-737f-11f0-bbf7-96ba5d0233b2",
            "title": "–î–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ 1 300 —Ä. / –º–µ—Å.",
            "description": "–ü–æ—Å–µ—â–µ–Ω–∏–µ —Å 7:00 –¥–æ 17:00, —Ç—Ä–µ–Ω–∞–∂—ë—Ä–Ω—ã–π –∑–∞–ª –∏ –∫–∞—Ä–¥–∏–æ-–∑–æ–Ω–∞.",
            "price": 1300,
            "available_time": "",
            "fee": {"id": "1033dc61-2fc7-11f0-bbd0-99fe2db82e7a", "title": "–°—Ç–∞—Ä—Ç–æ–≤—ã–π –≤–∑–Ω–æ—Å", "price": "3000"}
        },
        {
            "id": 5,
            "sub_id": "c63ba007-7382-11f0-bbf7-96ba5d0233b2",
            "title": "–î–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ 12 –º–µ—Å—è—Ü–µ–≤",
            "description": "–ü–æ—Å–µ—â–µ–Ω–∏–µ —Å 7:00 –¥–æ 17:00, —Ç—Ä–µ–Ω–∞–∂—ë—Ä–Ω—ã–π –∑–∞–ª –∏ –∫–∞—Ä–¥–∏–æ-–∑–æ–Ω–∞.",
            "price": 14900,
            "available_time": "",
            "fee": {"id": "", "title": "", "price": ""}
        },
        {
            "id": 6,
            "sub_id": "c13dee18-737f-11f0-bbf7-96ba5d0233b2",
            "title": "–î–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞ 6 –º–µ—Å—è—Ü–µ–≤",
            "description": "–ü–æ—Å–µ—â–µ–Ω–∏–µ —Å 7:00 –¥–æ 17:00, —Ç—Ä–µ–Ω–∞–∂—ë—Ä–Ω—ã–π –∑–∞–ª –∏ –∫–∞—Ä–¥–∏–æ-–∑–æ–Ω–∞.",
            "price": 8900,
            "available_time": "",
            "fee": {"id": "", "title": "", "price": ""}
        },
        {
            "id": 7,
            "sub_id": "fed5ab4c-7382-11f0-bbf7-96ba5d0233b2",
            "title": "–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å 1 700 —Ä. / –º–µ—Å.",
            "description": "–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, —Ç—Ä–µ–Ω–∞–∂—ë—Ä–Ω—ã–π –∑–∞–ª –∏ –∫–∞—Ä–¥–∏–æ-–∑–æ–Ω–∞.",
            "price": 1700,
            "available_time": "",
            "fee": {"id": "1033dc61-2fc7-11f0-bbd0-99fe2db82e7a", "title": "–°—Ç–∞—Ä—Ç–æ–≤—ã–π –≤–∑–Ω–æ—Å", "price": "3000"}
        },
        {
            "id": 8,
            "sub_id": "6c627e48-7383-11f0-bbf7-96ba5d0233b2",
            "title": "–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å 12 –º–µ—Å—è—Ü–µ–≤",
            "description": "–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, —Ç—Ä–µ–Ω–∞–∂—ë—Ä–Ω—ã–π –∑–∞–ª –∏ –∫–∞—Ä–¥–∏–æ-–∑–æ–Ω–∞.",
            "price": 17900,
            "available_time": "",
            "fee": {"id": "", "title": "", "price": ""}
        },
        {
            "id": 9,
            "sub_id": "348f7a39-7383-11f0-bbf7-96ba5d0233b2",
            "title": "–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å 6 –º–µ—Å—è—Ü–µ–≤",
            "description": "–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, —Ç—Ä–µ–Ω–∞–∂—ë—Ä–Ω—ã–π –∑–∞–ª –∏ –∫–∞—Ä–¥–∏–æ-–∑–æ–Ω–∞.",
            "price": 10900,
            "available_time": "",
            "fee": {"id": "", "title": "", "price": ""}
        }
    ]


def group_subscriptions_by_type(subscriptions_data):
    """–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ —Ç–∏–ø–∞–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    grouped = {}
    
    for subscription in subscriptions_data:
        title = subscription.get("title", "")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        if "–¢–µ—Å—Ç" in title:
            subscription_type = "–¢–µ—Å—Ç"
        elif "–î–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞" in title:
            subscription_type = "–î–Ω–µ–≤–Ω–∞—è –∫–∞—Ä—Ç–∞"
        elif "–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å" in title:
            subscription_type = "–ü–æ–ª–Ω—ã–π –¥–µ–Ω—å"
        elif "–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ" in title:
            subscription_type = "–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ"
        else:
            subscription_type = "–î—Ä—É–≥–æ–µ"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏
        if "12 –º–µ—Å—è—Ü" in title:
            period = 12
        elif "6 –º–µ—Å—è—Ü" in title:
            period = 6
        else:
            period = 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –≤ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        subscription["period"] = period
        subscription["type"] = subscription_type
        
        if subscription_type not in grouped:
            grouped[subscription_type] = []
        
        grouped[subscription_type].append(subscription)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –≥—Ä—É–ø–ø—É –ø–æ –ø–µ—Ä–∏–æ–¥—É (1, 6, 12 –º–µ—Å—è—Ü–µ–≤)
    for group_type in grouped:
        if group_type != "–¢–µ—Å—Ç":  # –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –ø–æ –ø–µ—Ä–∏–æ–¥—É
            grouped[group_type].sort(key=lambda x: x.get("period", 1))
    
    return grouped


def calculate_savings_percentage(monthly_price, multi_month_price, period):
    """–í—ã—á–∏—Å–ª—è–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —ç–∫–æ–Ω–æ–º–∏–∏ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤"""
    if not monthly_price or not multi_month_price or period <= 1:
        return 0
    
    # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏ –µ–∂–µ–º–µ—Å—è—á–Ω–æ–π –æ–ø–ª–∞—Ç–µ
    total_monthly_cost = monthly_price * period
    
    # –≠–∫–æ–Ω–æ–º–∏—è –≤ —Ä—É–±–ª—è—Ö
    savings = total_monthly_cost - multi_month_price
    
    # –ü—Ä–æ—Ü–µ–Ω—Ç —ç–∫–æ–Ω–æ–º–∏–∏
    if total_monthly_cost > 0:
        savings_percentage = (savings / total_monthly_cost) * 100
        return round(savings_percentage)
    
    return 0


def format_subscription_with_savings(subscription, monthly_subscription=None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º —ç–∫–æ–Ω–æ–º–∏–∏"""
    title = subscription.get("title", "")
    price = subscription.get("price", 0)
    period = subscription.get("period", 1)
    description = subscription.get("description", "")
    
    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 6 –∏–ª–∏ 12 –º–µ—Å—è—Ü–µ–≤, –≤—ã—á–∏—Å–ª—è–µ–º —ç–∫–æ–Ω–æ–º–∏—é
    if period > 1 and monthly_subscription:
        monthly_price = monthly_subscription.get("price", 0)
        if monthly_price > 0:
            savings_percent = calculate_savings_percentage(monthly_price, price, period)
            if savings_percent > 0:
                title += f" üî• –≠–ö–û–ù–û–ú–ò–Ø {savings_percent}%"
    
    return {
        "title": title,
        "price": price,
        "period": period,
        "description": description,
        "id": subscription.get("id"),
        "sub_id": subscription.get("sub_id"),
        "fee": subscription.get("fee", {}),
        "type": subscription.get("type", "")
    }

def get_default_subscriptions():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–æ–∫"""
    return [
        {
            "id": 1,
            "sub_id": "default_1",
            "title": "SmartFit",
            "description": "SmartFit ‚Äî 1300 ‚ÇΩ/–º–µ—Å\n–î–æ—Å—Ç—É–ø: 07:00‚Äì17:30, 20:30‚Äì23:30",
            "price": 1300,
        },
        {
            "id": 2,
            "sub_id": "default_2", 
            "title": "FitFlow",
            "description": "FitFlow ‚Äî 1700 ‚ÇΩ/–º–µ—Å\n–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è",
            "price": 1700,
        },
        {
            "id": 3,
            "sub_id": "default_3",
            "title": "ProFit",
            "description": "ProFit ‚Äî 2400 ‚ÇΩ/–º–µ—Å\n–ë–µ–∑–ª–∏–º–∏—Ç + –≥—Ä—É–ø–ø–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã",
            "price": 2400,
        },
    ]

# –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–ø–∏—Å–æ–∫ (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–∞–∫ fallback)
SUBSCRIPTION_VARIANTS = get_default_subscriptions()

MASSIVE_SUCCESS = """
üéâ –û—Ç–ª–∏—á–Ω–æ! –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!

–¢–µ–ø–µ—Ä—å –ø–æ–¥–æ–π–¥–∏—Ç–µ –≤ –æ—Ç–¥–µ–ª –ø—Ä–æ–¥–∞–∂ –∫–ª—É–±–∞ ‚Äî –≤–∞—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—Ç –≤ —Å–∏—Å—Ç–µ–º–µ.  
–í—ã —É–∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ—Å–µ—â–∞—Ç—å –∫–ª—É–± —Ö–æ—Ç—å —Å–µ–≥–æ–¥–Ω—è ‚Äî –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω üîì

–î–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ –∑–∞–ª–µ! üèãÔ∏èüî•
""" 